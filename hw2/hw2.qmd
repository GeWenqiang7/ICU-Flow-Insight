---
title: "Biostat 203B Homework 2"
subtitle: Due Feb 7, 2025 @ 11:59PM
author: "Wenqiang Ge UID:106371961"
format:
  # pdf:
  #   documentclass: article
  #   toc: true
  #   toc-depth: 2
  #   keep-tex: true
  #   number-sections: true
  #   highlight-style: tango
  html:
    theme: cosmo
    embed-resources: true
    number-sections: false
    toc: true
    toc-depth: 4
    toc-location: left
    code-fold: false
    link-external-icon: true
    link-external-newwindow: true
---

Display machine information for reproducibility:

```{r}
sessionInfo()
```

Load necessary libraries (you can add more as needed).

```{r setup}
library(arrow)
library(data.table)
library(duckdb)
library(memuse)
library(pryr)
library(R.utils)
library(tidyverse)
```

Display memory information of your computer

```{r}
memuse::Sys.meminfo()
```

In this exercise, we explore various tools for ingesting the [MIMIC-IV](https://physionet.org/content/mimiciv/3.1/) data introduced in [homework 1](https://ucla-biostat-203b.github.io/2025winter/hw/hw1/hw1.html).

Display the contents of MIMIC `hosp` and `icu` data folders:

```{bash}
ls -l ~/mimic/hosp/
```

```{bash}
ls -l ~/mimic/icu/
```

## Q1. `read.csv` (base R) vs `read_csv` (tidyverse) vs `fread` (data.table)

### Q1.1 Speed, memory, and data types

There are quite a few utilities in R for reading plain text data files. Let us test the speed of reading a moderate sized compressed csv file, `admissions.csv.gz`, by three functions: `read.csv` in base R, `read_csv` in tidyverse, and `fread` in the data.table package.

Which function is fastest? Is there difference in the (default) parsed data types? How much memory does each resultant data frame or tibble use? (Hint: `system.time` measures run times; `pryr::object_size` measures memory usage; all these readers can take gz file as input without explicit decompression.)

------------------------------------------------------------------------

Solution:

```{r}
library(microbenchmark)
library(readr)
library(data.table)

base = read.csv("~/mimic/hosp/admissions.csv.gz")
readr = read_csv("~/mimic/hosp/admissions.csv.gz", show_col_types = FALSE)
dt = fread("~/mimic/hosp/admissions.csv.gz")

benchmark_results <- microbenchmark(
  base , readr , dt , times = 5
)
print(benchmark_results)
```

```{r}
library(pryr)
size_base <- object_size(base)
size_readr <- object_size(readr)
size_fread <- object_size(dt)

print(data.frame(
  Method = c("Base R", "readr", "data.table"),
  Memory_MB = c(size_base, size_readr, size_fread)
))
```

The fastest function of reading a compressed csv file is fread. The best memory efficiency function is fread().

read.csv() (Base R): Converts character columns to factors.

read_csv() (readr): Keeps character columns as character.

fread() (data.table): Automatically detects optimal types for speed & memory efficiency.

### Q1.2 User-supplied data types

Re-ingest `admissions.csv.gz` by indicating appropriate column data types in `read_csv`. Does the run time change? How much memory does the result tibble use? (Hint: `col_types` argument in `read_csv`.)

------------------------------------------------------------------------

Solution:

```{r}
file_path <- "~/mimic/hosp/admissions.csv.gz"

col_spec <- cols(
  subject_id = col_integer(),
  hadm_id = col_integer(),
  hospital_expire_flag = col_integer(),
  admission_type = col_character(),
  admission_location = col_character(),
  discharge_location = col_character(),
  insurance = col_character(),
  language = col_character(),
  marital_status = col_character(),
  race = col_character(),
  admittime = col_datetime(format = "%Y-%m-%d %H:%M:%S"),
  dischtime = col_datetime(format = "%Y-%m-%d %H:%M:%S"),
  deathtime = col_datetime(format = "%Y-%m-%d %H:%M:%S"),
  edregtime = col_datetime(format = "%Y-%m-%d %H:%M:%S"),
  edouttime = col_datetime(format = "%Y-%m-%d %H:%M:%S")
)

system.time(df_optimized <- read_csv(file_path, col_types = col_spec))

memory_optimized <- object_size(df_optimized) / (1024^2)  # Convert to MB
print(paste("Optimized Tibble Memory Usage:", 
            round(memory_optimized, 2), "MB"))
```

Yes, both the runtime and memory have changed. The running time has become shorter and the required memory for operation has also decreased.

## Q2. Ingest big data files

::: center
![](images/clipboard-3872246486.png)
:::

Let us focus on a bigger file, `labevents.csv.gz`, which is about 130x bigger than `admissions.csv.gz`.

```{bash}
ls -l ~/mimic/hosp/labevents.csv.gz
```

Display the first 10 lines of this file.

------------------------------------------------------------------------

Solution:

```{bash}
zcat < ~/mimic/hosp/labevents.csv.gz | head -10
```

### Q2.1 Ingest `labevents.csv.gz` by `read_csv`

::: center
![](images/clipboard-1269004251.png){fig-align="center" width="158"}
:::

Try to ingest `labevents.csv.gz` using `read_csv`. What happens? If it takes more than 3 minutes on your computer, then abort the program and report your findings.

------------------------------------------------------------------------

Solution:

```{r}
#| eval: false
start_time <- Sys.time()

tryCatch({
  labevents <- read_csv("~/mimic/hosp/labevents.csv.gz")

  end_time <- Sys.time()
  elapsed_time <- difftime(end_time, start_time, units = "mins")

  if (elapsed_time > 3) {
    stop("Reading the file took more than 3 minutes. Aborting process.")
  }

  cat("File successfully read in", round(elapsed_time, 2), "minutes.\n")
  print(head(labevents))
}, error = function(e) {
  cat("Error occurred:", conditionMessage(e), "\n")
})

```

![](images/clipboard-3985632768.png)

Compressed CSV files (. gz) are read line by line, but will significantly expand in memory. Files like labevents. csv. gz (which may have compressed several GB) may expand to tens of GB during loading. My system doesn't have enough RAM, R will run out of memory and crash. The read_csv() function in the reader reads the entire dataset into memory before processing and ultimately attempts to load all its contents into memory. Unlike databases, it cannot efficiently stream data, resulting in high memory usage and ultimately causing computer memory crashes.

### Q2.2 Ingest selected columns of `labevents.csv.gz` by `read_csv`

Try to ingest only columns `subject_id`, `itemid`, `charttime`, and `valuenum` in `labevents.csv.gz` using `read_csv`. Does this solve the ingestion issue? (Hint: `col_select` argument in `read_csv`.)

------------------------------------------------------------------------

Solution:

```{r}
#| eval: false
start_time <- Sys.time()

tryCatch({
  labevents <- read_csv("~/mimic/hosp/labevents.csv.gz", 
                        col_select = c(subject_id, itemid, 
                                       charttime, valuenum))

  end_time <- Sys.time()
  elapsed_time <- difftime(end_time, start_time, units = "mins")
  
  if (elapsed_time > 3) {
    stop("Reading the file took more than 3 minutes. Aborting process.")
  }

  cat("File successfully read in", round(elapsed_time, 2), "minutes.\n")
  print(head(labevents))
}, error = function(e) {
  cat("Error occurred:", conditionMessage(e), "\n")
})

```

![](images/clipboard-2141023261.png)

NO, it is the same result with Q2.1.

Even if fewer columns are read, read_csv() will still load all content into RAM. If the dataset has billions of rows and the memory usage is still high, it can cause R to crash. Even if I only selected a few columns, I still have to decompress the entire file first. The labevents.csv.gz file has been compressed, and read_csv() must first decompress it into memory, resulting in high RAM usage. At the same time, unlike databases, read_csv() loads all data into memory at once. It does not support streaming, so even selecting fewer columns cannot fully alleviate memory pressure.

### Q2.3 Ingest a subset of `labevents.csv.gz`

::: center
![](images/clipboard-3335862154.png){fig-align="center" width="162"}
:::

Our first strategy to handle this big data file is to make a subset of the `labevents` data. Read the [MIMIC documentation](https://mimic.mit.edu/docs/iv/modules/hosp/labevents/) for the content in data file `labevents.csv`.

In later exercises, we will only be interested in the following lab items: creatinine (50912), potassium (50971), sodium (50983), chloride (50902), bicarbonate (50882), hematocrit (51221), white blood cell count (51301), and glucose (50931) and the following columns: `subject_id`, `itemid`, `charttime`, `valuenum`. Write a Bash command to extract these columns and rows from `labevents.csv.gz` and save the result to a new file `labevents_filtered.csv.gz` in the current working directory. (Hint: Use `zcat <` to pipe the output of `labevents.csv.gz` to `awk` and then to `gzip` to compress the output. Do **not** put `labevents_filtered.csv.gz` in Git! To save render time, you can put `#| eval: false` at the beginning of this code chunk. TA will change it to `#| eval: true` before rendering your qmd file.)

------------------------------------------------------------------------

Solution:

```{bash}
#| eval: false
zcat < ~/mimic/hosp/labevents.csv.gz | awk -F',' '
    BEGIN { OFS=","; print "subject_id,itemid,charttime,valuenum" } 
    NR == 1 { 
        for (i=1; i<=NF; i++) { col[$i] = i }
        next 
    }
    $col["itemid"] ~ /50912|50971|50983|50902|50882|51221|51301|50931/ {
        print $col["subject_id"], 
        $col["itemid"], $col["charttime"], $col["valuenum"]
    }
' | gzip > labevents_filtered.csv.gz

```

Display the first 10 lines of the new file `labevents_filtered.csv.gz`. How many lines are in this new file, excluding the header? How long does it take `read_csv` to ingest `labevents_filtered.csv.gz`?

------------------------------------------------------------------------

Solution:

```{bash}
# Display the first 10 rows of the file after skipping the header
zcat labevents_filtered.csv.gz | tail -n +2 | head -10

# Count the total number of rows in the file (excluding the header)
expr $(zcat labevents_filtered.csv.gz | wc -l) - 1
```

```{r}
# Start measuring time to evaluate performance
start_time <- Sys.time()

# Read the compressed CSV file using readr's read_csv()
# This loads the dataset into memory, expanding the compressed file
labevents_filtered <- read_csv("labevents_filtered.csv.gz")

# Stop measuring time
end_time <- Sys.time()

# Calculate elapsed time (time taken to read the file)
elapsed_time <- difftime(end_time, start_time, units = "secs")

cat("Time taken to read labevents_filtered.csv.gz:", 
      round(elapsed_time, 2), "seconds\n")

```

### Q2.4 Ingest `labevents.csv` by Apache Arrow

::: center
![](images/clipboard-2930408836.png){fig-align="center" width="206" height="99"}
:::

Our second strategy is to use [Apache Arrow](https://arrow.apache.org/) for larger-than-memory data analytics. Unfortunately Arrow does not work with gz files directly. First decompress `labevents.csv.gz` to `labevents.csv` and put it in the current working directory (do not add it in git!). To save render time, put `#| eval: false` at the beginning of this code chunk. TA will change it to `#| eval: true` when rendering your qmd file.

------------------------------------------------------------------------

Solution:

```{bash}
#| eval: false
gzip -d -c ~/mimic/hosp/labevents.csv.gz > \
~/biostat-203b-2025-winter/hw2/labevents.csv
```

Then use [`arrow::open_dataset`](https://arrow.apache.org/docs/r/reference/open_dataset.html) to ingest `labevents.csv`, select columns, and filter `itemid` as in Q2.3. How long does the ingest+select+filter process take? Display the number of rows and the first 10 rows of the result tibble, and make sure they match those in Q2.3. (Hint: use `dplyr` verbs for selecting columns and filtering rows.)

Write a few sentences to explain what is Apache Arrow. Imagine you want to explain it to a layman in an elevator.

------------------------------------------------------------------------

Solution:

```{r}
# 1. Open the CSV dataset efficiently using Apache Arrow
labevents_ds <- open_dataset("~/biostat-203b-2025-winter/hw2/labevents.csv", 
                             format = "csv")

start_time <- Sys.time()

# 2. Perform selection and filtering using dplyr functions
labevents_filtered_arrow <- labevents_ds %>%
  # Select only necessary columns
  select(subject_id, itemid, charttime, valuenum) %>%
  # Filter specific item IDs
  filter(itemid %in% c(50912, 50971, 50983, 50902, 
                       50882, 51221, 51301, 50931)) %>%
  collect()#Bring the filtered results into memory as a tibble

end_time <- Sys.time()

elapsed_time <- difftime(end_time, start_time, units = "secs")

cat("Time taken for ingestion, selection, and filtering:", 
    round(elapsed_time, 2), "seconds\n")

cat("Number of rows in filtered dataset:", 
    nrow(labevents_filtered_arrow), "\n")

print(head(labevents_filtered_arrow, 10))

# Free up memory by removing the tibble
rm(labevents_filtered_arrow)

```

Apache Arrow is like a high-speed data train. The traditional way of processing large datasets is like moving boxes one after another, while Arrow loads the entire train carriage at once, making the processing speed very fast. It saves data in a format that can be efficiently read by multiple tools (R, Python, Spark) without the need for additional conversions. This means that you can quickly analyze large datasets without running out of memory. If you handle big data, Arrow is your secret weapon for improving speed and efficiency.

### Q2.5 Compress `labevents.csv` to Parquet format and ingest/select/filter

::: center
![](images/clipboard-1303198055.png){fig-align="center" width="257" height="56"}
:::

Re-write the csv file `labevents.csv` in the binary Parquet format (Hint: [`arrow::write_dataset`](https://arrow.apache.org/docs/r/reference/write_dataset.html).) How large is the Parquet file(s)? How long does the ingest+select+filter process of the Parquet file(s) take? Display the number of rows and the first 10 rows of the result tibble and make sure they match those in Q2.3. (Hint: use `dplyr` verbs for selecting columns and filtering rows.)

Write a few sentences to explain what is the Parquet format. Imagine you want to explain it to a layman in an elevator.

------------------------------------------------------------------------

Solution:

```{r}
#| eval: false
# 1. Open the CSV dataset using Apache Arrow
labevents_csv <- open_dataset("~/biostat-203b-2025-winter/hw2/labevents.csv", 
                              format = "csv")
# 2. Write the dataset to Parquet format
write_dataset(
  labevents_csv,
  path = "~/biostat-203b-2025-winter/hw2/labevents_parquet",
  format = "parquet"
)
```

```{r}
# Use the system command to check the size of the Parquet dataset 
parquet_size <- system(
  "du -sh ~/biostat-203b-2025-winter/hw2/labevents_parquet/",
  intern = TRUE) 
cat("Size of Parquet dataset:", parquet_size, "\n")
rm(parquet_size)
```

```{r}
# 1. Open the Parquet dataset (created previously)
parquet_data <- open_dataset(
  "~/biostat-203b-2025-winter/hw2/labevents_parquet",
  format = "parquet"
)
```

```{r}
#| eval: false
start_time <- Sys.time()

# 2. Time the ingest+select+filter process
result <- parquet_data %>%
  # Select only necessary columns
  select(subject_id, itemid, charttime, valuenum) %>%
  # Filter specific item IDs
  filter(itemid %in% c(50912, 50971, 50983, 50902, 
                       50882, 51221, 51301, 50931)) %>%  
  collect()#Bring the filtered results into memory as a tibble                   


end_time <- Sys.time()

elapsed_time <- difftime(end_time, start_time, units = "secs")

cat("Time taken for ingestion, selection, and filtering:", 
    round(elapsed_time, 2), "seconds\n")

# 3. Display the number of rows and the first 10 rows
cat("Number of rows in result:", nrow(result), "\n")
head(result, 10)

# Free up memory by removing the tibble
rm(result)
```

Parquet makes storing data faster and more efficient, especially for large datasets. Imagine you have a huge spreadsheet, but you only need a few columns instead of the entire file. Parquet does not read data line by line like traditional files such as CSV, but organizes data by column. This means that if you only need one column, it can quickly grab that part without loading everything else - it's a bit like searching for a book in a well-organized library instead of searching through a pile of messy files. It saves storage space and makes data analysis faster! Arrow is primarily an efficient in memory data format designed to accelerate tasks such as data analysis, machine learning, and database queries. Arrow enables data to be stored in RAM in an efficient format, avoiding repeated format conversions and improving query speed. Different languages can directly share data without conversion, with zero copy, greatly improving computational efficiency. Support for vectorized computing: Arrow enables CPU to process data in parallel, faster than traditional methods.

### Q2.6 DuckDB

::: center
![](images/clipboard-157299878.png){fig-align="center" width="168"}
:::

Ingest the Parquet file, convert it to a DuckDB table by [`arrow::to_duckdb`](https://arrow.apache.org/docs/r/reference/to_duckdb.html), select columns, and filter rows as in Q2.5. How long does the ingest+convert+select+filter process take? Display the number of rows and the first 10 rows of the result tibble and make sure they match those in Q2.3. (Hint: use `dplyr` verbs for selecting columns and filtering rows.)

Write a few sentences to explain what is DuckDB. Imagine you want to explain it to a layman in an elevator.

------------------------------------------------------------------------

Solution:

```{r}
# 1. Open the Parquet dataset
parquet_data <- open_dataset(
  "~/biostat-203b-2025-winter/hw2/labevents_parquet",
  format = "parquet"
)
```

```{r}
# 2. Convert to a DuckDB table
con <- dbConnect(duckdb::duckdb(), dbdir = ":memory:") 
duckdb_table <- to_duckdb(parquet_data, 
                          con = con, table_name = "labevents_duckdb")
```

```{r}
#| eval: false
# Start timer
start_time <- Sys.time()

# 3. Perform selection, filtering, and enforce sorting
result <- tbl(con, "labevents_duckdb") %>%
  select(subject_id, itemid, charttime, valuenum) %>%
  filter(itemid %in% c(50912, 50971, 50983, 50902, 
                       50882, 51221, 51301, 50931)) %>%  
  
  # Explicitly sort by subject_id & time
  arrange(subject_id, charttime) %>%  
  #Bring the filtered results into memory as a tibble
  collect()

# Stop timer
end_time <- Sys.time()
```

```{r}
#| eval: false
elapsed_time <- difftime(end_time, start_time, units = "secs")

# 4. Display processing time
cat("Ingest+convert+select+filter process took:", 
    round(elapsed_time, 2), "seconds\n")

# 5. Display number of rows and the first 10 rows
cat("Number of rows in result:", nrow(result), "\n")
print(head(result, 10))

# Disconnect from DuckDB
dbDisconnect(con, shutdown = TRUE)

# Free up memory by removing the tibble
rm(result)
```

Imagine you have a bunch of files, and every time you need to find something, you have to flip through them one by one - this is how traditional databases work. On the other hand\*\* DuckDB \* \* is like having a super fast librarian who will immediately give you what you need. It is designed for lightning fast data analysis, especially for large datasets, without the hassle of setting up a large database server. You can run it directly on your laptop, just like opening a spreadsheet, but its working speed is comparable to modern data tools. It's like giving your data a \* \* turbocharger \* \*, making complex queries feel as simple as Google search!

## Q3. Ingest and filter `chartevents.csv.gz`

[`chartevents.csv.gz`](https://mimic.mit.edu/docs/iv/modules/icu/chartevents/) contains all the charted data available for a patient. During their ICU stay, the primary repository of a patient’s information is their electronic chart. The `itemid` variable indicates a single measurement type in the database. The `value` variable is the value measured for `itemid`. The first 10 lines of `chartevents.csv.gz` are

```{bash}
#| eval: false
zcat < ~/mimic/icu/chartevents.csv.gz | head -10
```

How many rows? 433 millions.(432997491)

```{bash}
#| eval: false
zcat < ~/mimic/icu/chartevents.csv.gz | tail -n +2 | wc -l
```

[`d_items.csv.gz`](https://mimic.mit.edu/docs/iv/modules/icu/d_items/) is the dictionary for the `itemid` in `chartevents.csv.gz`.

```{bash}
#| eval: false
zcat < ~/mimic/icu/d_items.csv.gz | head -10
```

In later exercises, we are interested in the vitals for ICU patients: heart rate (220045), mean non-invasive blood pressure (220181), systolic non-invasive blood pressure (220179), body temperature in Fahrenheit (223761), and respiratory rate (220210). Retrieve a subset of `chartevents.csv.gz` only containing these items, using the favorite method you learnt in Q2.

Document the steps and show code. Display the number of rows and the first 10 rows of the result tibble.

------------------------------------------------------------------------

Solution: Using the Apache Arrow

```{r}
# Define file paths
chartevents_path <- "~/mimic/icu/chartevents.csv.gz"
parquet_path <- "~/biostat-203b-2025-winter/hw2/chartevents_vitals.parquet"  
```

```{r}
# Start timing
start_time <- Sys.time()

# Load and filter using Apache Arrow
chartevents_vitals <- open_dataset(chartevents_path, format = "csv") %>%
  select(subject_id, itemid, charttime,valuenum) %>%
  filter(itemid %in% c(220045, 220181, 220179, 223761, 220210)) %>%
  collect()  # Convert to in-memory tibble

# Save as Parquet for faster access in future
write_parquet(chartevents_vitals, parquet_path)

# End timing
end_time <- Sys.time()
elapsed_time <- difftime(end_time, start_time, units = "secs")

# Display processing time
cat("Time taken for filtering and saving:", 
    round(elapsed_time, 2), "seconds\n")

# Display number of rows in the filtered dataset
cat("Number of rows in filtered dataset:", 
    nrow(chartevents_vitals), "\n")

# Display first 10 rows
print(head(chartevents_vitals, 10))

# Free up memory by removing the tibble
rm(chartevents_vitals)
```
