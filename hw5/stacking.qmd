---
title: "Biostat 203B Homework 5"
subtitle: Due Mar 20 @ 11:59PM
author: "Wenqiang Ge UID:106371961"
format:
  html:
    theme: cosmo
    embed-resources: true
    number-sections: false
    toc: true
    toc-depth: 4
    toc-location: left
    code-fold: false
  # pdf:
  #   documentclass: article
  #   toc: true
  #   toc-depth: 2
  #   keep-tex: true
  #   number-sections: true
  #   highlight-style: tango
---

## Predicting ICU duration

Using the ICU cohort `mimiciv_icu_cohort.rds` you built in Homework 4, develop at least three machine learning approaches (logistic regression with enet regularization, random forest, boosting, SVM, MLP, etc) plus a model stacking approach for predicting whether a patient's ICU stay will be longer than 2 days. You should use the `los_long` variable as the outcome. You algorithms can use patient demographic information (gender, age at ICU `intime`, marital status, race), ICU admission information (first care unit), the last lab measurements before the ICU stay, and first vital measurements during ICU stay as features. You are welcome to use any feature engineering techniques you think are appropriate; but make sure to not use features that are not available at an ICU stay's `intime`. For instance, `last_careunit` cannot be used in your algorithms.

1.  Data preprocessing and feature engineering.

```{r}
# Load libraries
library(GGally)
library(gtsummary)
library(ranger)
library(tidyverse)
library(tidymodels)
library(xgboost)
library(doParallel)
library(stacks)
library(keras)
library(dplyr)
library(e1071)
library(rsample)
library(glmnet)
library(vip)
```

```{r}
#loading data
mimic_icu_cohort <- readRDS("../hw4/mimiciv_shiny/mimic_icu_cohort.rds")
lab <- c("creatinine", "potassium", "sodium", "chloride", "bicarbonate", 
              "hematocrit", "glucose", "wbc")

vital <- c("heart_rate", "non-invasive_blood_pressure_systolic", 
                "non-invasive_blood_pressure_diastolic", 
                "temperature_fahrenheit", "respiratory_rate")

#Select the variables
mimic_icu_cohort <- mimic_icu_cohort |>
  select(c("subject_id", "hadm_id", "stay_id",
           "gender","first_careunit", 
            "insurance","marital_status",
           "race","age_intime",
            all_of(lab), all_of(vital),
           "los_long")) |>
  arrange("subject_id", "hadm_id", "stay_id") 

```

```{r}
#Convert gender to factor variables
mimic_icu_cohort$gender <- ifelse(mimic_icu_cohort$gender == "M",0,1)
mimic_icu_cohort$gender <- factor(mimic_icu_cohort$gender)

# For character or factor variables, replace NA with 0, and label other unique values
mimic_icu_cohort[] <- lapply(mimic_icu_cohort, function(x) {
  # Only modify character or factor columns, but skip 'gender'
  if (is.factor(x) || is.character(x)) {
    # Skip the 'gender' column
    if (!"gender" %in% names(mimic_icu_cohort)[
      which(sapply(mimic_icu_cohort, identical, x))
      ]) {
      # Convert to character type if it is not gender
      x <- as.character(x)
      
      # Replace NA with "0"
      x[is.na(x)] <- "0"
      
      # Convert back to factor and then numeric
      x <- factor(x)
      return(as.numeric(x))  # Convert factor levels to numeric
    }
  }
  return(x)  # Leave other columns unchanged
})

```

```{r}
# Check for outliers in numeric variables
mimic_icu_cohort[] <- lapply(mimic_icu_cohort, function(x) {
  if (is.numeric(x)) {
    # Calculate the first (Q1) and third (Q3) quartiles, and the IQR (Interquartile Range)
    Q1 <- quantile(x, 0.25, na.rm = TRUE)
    Q3 <- quantile(x, 0.75, na.rm = TRUE)
    IQR_value <- Q3 - Q1
    
    # Define the lower and upper limits for outliers using the IQR method
    lower_limit <- Q1 - 1.5 * IQR_value
    upper_limit <- Q3 + 1.5 * IQR_value
    
    # Replace values outside the defined limits with NA (outliers)
    x[x < lower_limit | x > upper_limit] <- NA
  }
  return(x)
})
```

```{r}
#Replace NA values with the mean of the column
mimic_icu_cohort[] <- lapply(mimic_icu_cohort, function(x) {
  if (is.numeric(x)) {
    x[is.na(x)] <- mean(x, na.rm = TRUE)  # Replace NA with the mean value
  }
  return(x)
})
```

```{r}
# Convert los_long to a factor
mimic_icu_cohort$los_long <- factor(mimic_icu_cohort$los_long, levels = c(FALSE, TRUE))

# Remove rows where los_long is NA
mimic_icu_cohort <- mimic_icu_cohort %>%
  drop_na(los_long)

#Convert other variables to factors
mimic_icu_cohort$marital_status <- factor(mimic_icu_cohort$marital_status)
mimic_icu_cohort$race <- factor(mimic_icu_cohort$race)
mimic_icu_cohort$first_careunit <- factor(mimic_icu_cohort$first_careunit)
mimic_icu_cohort$insurance <- factor(mimic_icu_cohort$insurance)

head(mimic_icu_cohort)
```

2.  Partition data into 50% training set and 50% test set. Stratify partitioning according to `los_long`. For grading purpose, sort the data by `subject_id`, `hadm_id`, and `stay_id` and use the seed `203` for the initial data split. Below is the sample code.

#### Initial split into test and non-test sets

```{r}
set.seed(203)

# sort
mimic_icu_cohort <- mimic_icu_cohort |>
  arrange(subject_id, hadm_id, stay_id)

data_split <- initial_split(
  mimic_icu_cohort, 
  # stratify by los_long
  strata = "los_long", 
  prop = 0.5
  )

mimic_train <- training(data_split) |>
  select(-subject_id, -hadm_id, -stay_id)
dim(mimic_train )

mimic_test <- testing(data_split) |>
  select(-subject_id, -hadm_id, -stay_id)
dim(mimic_test)
```

#### Recipe

```{r}
data_recipe <- 
  recipe(
    los_long ~ ., 
    data = mimic_train
    ) |>
  step_dummy(all_nominal_predictors()) |>
  step_zv(all_numeric_predictors()) |>
  step_normalize(all_numeric_predictors())
data_recipe
```

```{r}
folds <- vfold_cv(mimic_train, v = 5)
```

### logistic regression with enet regularization

#### Model & Workflow

```{r}
# set up the logistic regression model
logit_model <- logistic_reg(
  penalty = tune(), 
  mixture = tune()) |>
  set_engine("glmnet", 
             standardize = TRUE)
  
logit_wf <- workflow() |>
  add_recipe(data_recipe) |>
  add_model(logit_model) |>
  print()
```

#### Tuning grid

```{r}
logit_grid <- grid_regular(
  penalty(range = c(-6, 4)), 
  mixture(),
  levels = c(40, 4)
)
```

#### Cross-validation

```{r}
set.seed(203)

if (file.exists("logit_res.rds")) {
  logit_res <- read_rds("logit_res.rds")
} else {
  logit_res <- 
    tune_grid(
      object = logit_wf, 
      resamples = folds, 
      grid = logit_grid,
      metrics = metric_set(roc_auc, accuracy),
      control = control_stack_grid()
    )
  write_rds(logit_res, "logit_res.rds")
}
logit_res
```

```{r}
# visualize the CV results
logit_res |>
  collect_metrics() |>
  print(width = Inf) |>
  filter(.metric == "roc_auc") |>
  ggplot(mapping = aes(x = penalty, y = mean, 
                       color = factor(mixture))) +
  geom_point() +
  labs(x = "Penalty", y = "CV Roc_Auc") +
  scale_x_log10()
```

#### Finalize the model

```{r}
#show best models
logit_res |>
  show_best(metric = "roc_auc")

# select the best model
best_logit <- logit_res |>
  select_best(metric = "roc_auc")
best_logit
```

```{r}
#Testing
final_logit <- logit_wf |>
  finalize_workflow(best_logit)
final_logit
```

```{r}
# Fit the whole training set, then predict the test cases
set.seed(203)
final_logit_fit <- 
  final_logit |>
  last_fit(data_split)
final_logit_fit

```

```{r}
final_logit_fit |> 
  collect_metrics()
```

#### Visualize the final model

```{r}
final_logic_tree <- extract_workflow(final_logit_fit)

final_logic_tree |>
  extract_fit_parsnip() |>
  vip()

rm(final_logic_tree,final_logit_fit,
   final_logit,logit_res,logit_grid)
```

### Boosting

#### Model & Workflow

```{r}
#Model
bt_mod <- 
  boost_tree(
    mode = "classification",
    trees = 800, 
    tree_depth = tune(),
    learn_rate = tune()
  ) %>% 
  set_engine("xgboost")
bt_mod
```

```{r}
#Workflow
bt_wf <- workflow() |>
  add_recipe(data_recipe) |>
  add_model(bt_mod)
bt_wf
```

#### Tuning grid

```{r}
#Tuning
param_grid <- grid_regular(
  tree_depth(range = c(1L, 3L)),
  learn_rate(range = c(-5, 2), trans = log10_trans()),
  levels = c(3, 1)
  )
param_grid

```

```{r}
library(doParallel)
registerDoParallel(cores = 4)  # Set the number of cores you want to use
```

#### Cross-validation

```{r}
bt_fit <- bt_wf %>%
  tune_grid(
    resamples = folds,
    grid = param_grid,
    metrics = metric_set(yardstick::roc_auc,
                         yardstick::accuracy)
    )
bt_fit

```

```{r}
bt_fit <- bt_wf |>
  tune_grid(
    resamples = folds,
    grid = param_grid,
    metrics = metric_set(roc_auc, accuracy),
    control = control_stack_grid()
  )

bt_fit |> write_rds("./boost_fit.rds")
```

```{r}
stopImplicitCluster()
registerDoSEQ()
```

```{r}
bt_fit <- readRDS("./boost_fit.rds")

bt_fit |>
  collect_metrics() |>
  print(width = Inf) |>
  filter(.metric == "roc_auc") |>
  ggplot(mapping = 
           aes(x = learn_rate, 
               y = mean, 
               color = factor(tree_depth))) +
  geom_point() +
  labs(x = "Learning Rate", y = "CV AUC") +
  scale_x_log10()

```

#### Finalize the model

```{r}
bt_fit |>
  show_best(metric = "roc_auc")
```

```{r}
best_boost <- bt_fit |>
  select_best(metric = "roc_auc")
best_boost
```

```{r}
final_boost_wf <- bt_wf |>
  finalize_workflow(best_boost)
final_boost_wf
```

```{r}
set.seed(203)
final_boost_fit <- 
  final_boost_wf |>
  last_fit(data_split)

```

```{r}
final_boost_fit |>
  collect_metrics()
```

#### Visualize the final model

```{r}
final_boost_tree <- extract_workflow(final_boost_fit)

final_boost_tree |>
  extract_fit_parsnip() |>
  vip()

rm(final_boost_tree,final_boost_fit,
   final_boost_wf,bt_fit,param_grid)
```

### Random Forest

#### Model & Workflow

```{r}
rf_mod <- 
  rand_forest(
    mode = "classification",
    mtry = tune(),
    trees = tune()
  ) |> 
  set_engine("ranger", importance = "impurity")
rf_mod
```

```{r}
rf_wf <- workflow() |>
  add_recipe(data_recipe) |>
  add_model(rf_mod)
rf_wf
```

#### Tuning grid

```{r}
rf_grid <- grid_regular(
  trees(range = c(300L, 700L)), 
  mtry(range = c(3L, 7L)),
  levels = c(2, 4)
  )
rf_grid
```

#### Cross-validation

```{r}
set.seed(203)

folds <- vfold_cv(mimic_train, v = 3)
```

```{r}
if (file.exists("rf_res.rds")) {
  rf_res <- read_rds("rf_res.rds")
} else {
  rf_res <- rf_wf |>
    tune_grid(
    resamples = folds,
    grid = rf_grid,
    metrics = metric_set(roc_auc, accuracy),
    control = control_grid(verbose = TRUE)
    )
  write_rds(rf_res, "rf_res.rds")
}
rf_res
```

```{r}
rf_res |>
  collect_metrics() |>
  print(width = Inf) |>
  filter(.metric == "roc_auc") |>
  ggplot(mapping = aes(x = trees, y = mean, color = factor(mtry))) +
  geom_point() + 
  geom_line() +
  labs(x = "Num. of Trees", y = "CV AUC")
```

#### Finalize the model

```{r}
rf_res |>
  show_best(metric = "roc_auc")

```

```{r}
#Select best model
best_rf <- rf_res |>
  select_best(metric = "roc_auc")
best_rf
```

```{r}
final_rf <- finalize_workflow(rf_wf, best_rf)

```

```{r}
final_fit <- final_rf |>
  last_fit(data_split)

final_fit
```

```{r}
final_fit |> 
  collect_metrics()
```

4.  Compare model classification performance on the test set. Report both the area under ROC curve and accuracy for each machine learning algorithm and the model stacking. Interpret the results. What are the most important features in predicting long ICU stays? How do the models compare in terms of performance and interpretability?

### Stacking model

#### Model & Workflow

```{r}

```

#### Tuning grid

```{r}

```

```{r}

```

#### Cross-validation

```{r}
```

```{r}

```

```{r}

```

```{r}

```

```{r}

```

#### Finalize the model

```{r}

```

```{r}

```

#### Visualize the final model

```{r}

```

```{r}

```
