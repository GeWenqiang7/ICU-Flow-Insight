---
title: "Biostat 203B Homework 1"
subtitle: Due Jan 24, 2025 @ 11:59PM
author: Wenqiang Ge ID:106371961
format:
  pdf:
    documentclass: article
    toc: true
    toc-depth: 2 
    keep-tex: true
  # html:
  #   theme: cosmo
  #   embed-resources: true
  #   number-sections: false
  #   toc: true
  #   toc-depth: 4
  #   toc-location: left
  #   code-fold: false
  #   link-external-icon: true
  #   link-external-newwindow: true
---

Display machine information for reproducibility:

```{r}
#| eval: true
sessionInfo()
```

## Q1. Git/GitHub

**No handwritten homework reports are accepted for this course.** We work with Git and GitHub. Efficient and abundant use of Git, e.g., frequent and well-documented commits, is an important criterion for grading your homework.

1.  Apply for the [Student Developer Pack](https://education.github.com/pack) at GitHub using your UCLA email. You'll get GitHub Pro account for free (unlimited public and private repositories).

2.  Create a **private** repository `biostat-203b-2025-winter` and add `Hua-Zhou` and TA team (`Tomoki-Okuno` for Lec 1; `parsajamshidian` and `BowenZhang2001` for Lec 82) as your collaborators with write permission.

3.  Top directories of the repository should be `hw1`, `hw2`, ... Maintain two branches `main` and `develop`. The `develop` branch will be your main playground, the place where you develop solution (code) to homework problems and write up report. The `main` branch will be your presentation area. Submit your homework files (Quarto file `qmd`, `html` file converted by Quarto, all code and extra data sets to reproduce results) in the `main` branch.

4.  After each homework due date, course reader and instructor will check out your `main` branch for grading. Tag each of your homework submissions with tag names `hw1`, `hw2`, ... Tagging time will be used as your submission time. That means if you tag your `hw1` submission after deadline, penalty points will be deducted for late submission.

5.  After this course, you can make this repository public and use it to demonstrate your skill sets on job market.

**Solution:**

Done!

## Q2. Data ethics training

This exercise (and later in this course) uses the [MIMIC-IV data v3.1](https://physionet.org/content/mimiciv/3.1/), a freely accessible critical care database developed by the MIT Lab for Computational Physiology. Follow the instructions at <https://mimic.mit.edu/docs/gettingstarted/> to (1) complete the CITI `Data or Specimens Only Research` course and (2) obtain the PhysioNet credential for using the MIMIC-IV data. Display the verification links to your completion report and completion certificate here. **You must complete Q2 before working on the remaining questions.** (Hint: The CITI training takes a few hours and the PhysioNet credentialing takes a couple days; do not leave it to the last minute.)

**Solution:**

Completion Report Link: <https://www.citiprogram.org/verify/?kcc436586-af5d-4128-bb91-ef37f2326698-67297842>

Completion Certificate Link:<https://www.citiprogram.org/verify/?w7ddecc3c-d853-4bc4-95ec-c08cd3268665-67297842>

sessionInfo()

## Q3. Linux Shell Commands

1.  Make the MIMIC-IV v3.1 data available at location `~/mimic`. The output of the `ls -l ~/mimic` command should be similar to the below (from my laptop).

```{bash}
#| eval: true
# content of mimic folder
ls -l ~/mimic/
```

Refer to the documentation <https://physionet.org/content/mimiciv/3.1/> for details of data files. Do **not** put these data files into Git; they are big. Do **not** copy them into your directory. Do **not** decompress the gz data files. These create unnecessary big files and are not big-data-friendly practices. Read from the data folder `~/mimic` directly in following exercises.

Use Bash commands to answer following questions.

2.  Display the contents in the folders `hosp` and `icu` using Bash command `ls -l`. Why are these data files distributed as `.csv.gz` files instead of `.csv` (comma separated values) files? Read the page <https://mimic.mit.edu/docs/iv/> to understand what's in each folder.

**Solution:**

```{bash}
ls -l ~/mimic/hosp
```

```{bash}
ls -l ~/mimic/icu
```

Compressed files save disk space as `.gz` files are smaller than raw `.csv` files. This will help to reduce network bandwidth usage and time required to download or transfer files. In addition, compression ensures the original data remains unaltered.

3.  Briefly describe what Bash commands `zcat`, `zless`, `zmore`, and `zgrep` do.

zcat: Outputs the contents of a compressed .gz file to the standard output without decompressing it to disk.

**Solution:**

zless: Allows you to view a compressed .gz file interactively, similar to less for uncompressed files.

zmore: Similar to zless, but works like more, showing the file in a paginated manner.

zgrep: Searches for a pattern inside a .gz compressed file, equivalent to grep for uncompressed files.

4.  (Looping in Bash) What's the output of the following bash script?

```{bash}
#| eval: false
for datafile in ~/mimic/hosp/{a,l,pa}*.gz
do
  ls -l $datafile
done
```

Display the number of lines in each data file using a similar loop. (Hint: combine linux commands `zcat <` and `wc -l`.)

**Solution:**

```{bash}
for datafile in ~/mimic/hosp/*.gz
do 
  echo "File: $datafile"
  zcat "$datafile" | wc -l
done
```

```{bash}
for datafile in ~/mimic/icu/*.gz
do 
  echo "File: $datafile"
  zcat "$datafile" | wc -l
done
```

5.  Display the first few lines of `admissions.csv.gz`. How many rows are in this data file, excluding the header line? Each `hadm_id` identifies a hospitalization. How many hospitalizations are in this data file? How many unique patients (identified by `subject_id`) are in this da\`ta file? Do they match the number of patients listed in the `patients.csv.gz` file? (Hint: combine Linux commands `zcat <`, `head`/`tail`, `awk`, `sort`, `uniq`, `wc`, and so on.)

**Solution:**

```{bash}
zcat ~/mimic/hosp/admissions.csv.gz | head
```

```{bash}
zcat ~/mimic/hosp/admissions.csv.gz | tail -n+2 | \
  awk -F, '{print $2}' | wc -l

zcat ~/mimic/hosp/admissions.csv.gz | tail -n+2 | \
  awk -F, '{print $2}' | sort | uniq | wc -l

zcat ~/mimic/hosp/admissions.csv.gz | tail -n+2 | \
  awk -F, '{print $1}' | sort | uniq | wc -l

zcat ~/mimic/hosp/patients.csv.gz | tail -n+2 | \
  awk -F, '{print $1}' | sort | uniq | wc -l
```

There are 546028 lines in the adimission.csv.gz.

546028 hospitalizations; 223452 unique patients.

There are 364627 unique patients listed in the patients.csv.gz file. They are not matched.

6.  What are the possible values taken by each of the variable `admission_type`, `admission_location`, `insurance`, and `ethnicity`? Also report the count for each unique value of these variables in decreasing order. (Hint: combine Linux commands `zcat`, `head`/`tail`, `awk`, `uniq -c`, `wc`, `sort`, and so on; skip the header line.)

**Solution:**

```{bash}
zcat ~/mimic/hosp/admissions.csv.gz | head -n 1 | tr ',' '\n' | nl
```

```{bash}
zcat ~/mimic/hosp/admissions.csv.gz | tail -n+2 | \
  awk -F ',' '{print $6}' | sort | uniq -c | sort -nr

zcat ~/mimic/hosp/admissions.csv.gz | tail -n+2 | \
  awk -F ',' '{print $8}' | sort | uniq -c | sort -nr

zcat ~/mimic/hosp/admissions.csv.gz | tail -n+2 | \
  awk -F ',' '{print $10}' | sort | uniq -c | sort -nr

zcat ~/mimic/hosp/admissions.csv.gz | tail -n+2 | \
  awk -F ',' '{print $13}' | sort | uniq -c | sort -nr

```

7.  The `icusays.csv.gz` file contains all the ICU stays during the study period. How many ICU stays, identified by `stay_id`, are in this data file? How many unique patients, identified by `subject_id`, are in this data file?

**Solution:**

```{bash}
zcat ~/mimic/icu/icustays.csv.gz | head -n 1 | tr ',' '\n' |nl
```

```{bash}
zcat ~/mimic/icu/icustays.csv.gz | tail -n+2 | \
  awk -F ',' '{print $1}' | wc -l

zcat ~/mimic/icu/icustays.csv.gz | tail -n+2 | \
  awk -F ',' '{print $1}' | sort | uniq | wc -l

zcat ~/mimic/icu/icustays.csv.gz | tail -n+2 | \
  awk -F ',' '{print $3}' | sort | uniq | wc -l

zcat ~/mimic/icu/icustays.csv.gz | tail -n+2 | \
  awk -F ',' '{print $1}' | wc -l
```

There are 94458 ICU stays and 65366 unique patients in this data file.

8.  *To compress, or not to compress. That's the question.* Let's focus on the big data file `labevents.csv.gz`. Compare compressed gz file size to the uncompressed file size. Compare the run times of `zcat < ~/mimic/labevents.csv.gz | wc -l` versus `wc -l labevents.csv`. Discuss the trade off between storage and speed for big data files. (Hint: `gzip -dk < FILENAME.gz > ./FILENAME`. Remember to delete the large `labevents.csv` file after the exercise.)

**Solution:**

Comparison of file size:

```{bash}
gzip -dk ~/mimic/hosp/labevents.csv.gz
```

```{bash}
ls -lh ~/mimic/hosp/labevents.csv.gz
ls -lh ~/mimic/hosp/labevents.csv
```

Comparison of run times:

```{bash}
time zcat ~/mimic/hosp/labevents.csv.gz | wc -l
```

```{bas}
time wc -l ~/mimic/hosp/labevents.csv 
```

```{bash}
rm ~/mimic/hosp/labevents.csv
```

**Trade off:** Storage trade-off Compressing files can save a lot of disk space and reduce network transmission time when moving data. Uncompressed files require more disk space, which may not be feasible for very large datasets. Due to decompression overhead, reading compressed files (zcat) may be slightly slower. However, for linear operations such as counting lines (wc-l), this difference can usually be ignored. The operation of uncompressed files can be faster because there is no decompression step. For very large files, the speed improvement may be obvious, but the storage overhead may outweigh the benefits.

## Q4. Who's popular in Price and Prejudice

1.  You and your friend just have finished reading *Pride and Prejudice* by Jane Austen. Among the four main characters in the book, Elizabeth, Jane, Lydia, and Darcy, your friend thinks that Darcy was the most mentioned. You, however, are certain it was Elizabeth. Obtain the full text of the novel from <http://www.gutenberg.org/cache/epub/42671/pg42671.txt> and save to your local folder.

```{bash}
#| eval: false
wget -nc http://www.gutenberg.org/cache/epub/42671/pg42671.txt
```

system("quarto --version") Explain what `wget -nc` does. Do **not** put this text file `pg42671.txt` in Git. Complete the following loop to tabulate the number of times each of the four characters is mentioned using Linux commands.

```{bash}
#| eval: false
wget -nc http://www.gutenberg.org/cache/epub/42671/pg42671.txt
for char in Elizabeth Jane Lydia Darcy
do
  echo $char:
  grep -ow "$char" pg42671.txt | wc -l
done
```

Solution:

wget is used to download files from the web.

2.  What's the difference between the following two commands?

```{bash}
#| eval: false
echo 'hello, world' > test1.txt
```

and

```{bash}
#| eval: false
echo 'hello, world' >> test2.txt
```

**Solution:**

The first one creates a new file test1.txt (if it doesn’t already exist) and writes 'hello, world' to it. If test1.txt already exists, this command overwrites the file, replacing its contents with 'hello, world'.

If test2.txt doesn’t exist, the second command creates the file first and writes 'hello, world' to it. If test2.txt already exists, this command adds 'hello, world' to the end of the existing file without deleting its previous contents.

3.  Using your favorite text editor (e.g., `vi`), type the following and save the file as `middle.sh`:

```{bash eval=FALSE}
#!/bin/sh
# Select lines from the middle of a file.
# Usage: bash middle.sh filename end_line num_lines
head -n "$2" "$1" | tail -n "$3"
```

Using `chmod` to make the file executable by the owner, and run

```{bash}
#| eval: false
chmod u+x middle.sh
./middle.sh pg42671.txt 20 5
```

Explain the output. Explain the meaning of `"$1"`, `"$2"`, and `"$3"` in this shell script. Why do we need the first line of the shell script?

**Solution:**

head -n 20 pg42671.txt: Extracts the first 20 lines of the file pg42671.txt.

tail -n 5: From the 20 lines produced by head, it extracts the last 5 lines.

The command runs the shell script middle.sh on the file pg42671.txt, extracting 5 lines from the end of the first 20 lines of the file.

In shell scripting, \$1, \$2, \$3, etc., refer to the positional parameters.

\$1: The first argument, in this case, the file name (pg42671.txt). \$2: The second argument, representing the total number of lines to extract from the beginning of the file. \$3: The third argument, representing the number of lines to extract from the result of head.

The shebang ensures that the correct shell is used to interpret the script. If we don't use it, the script might default to another shell (e.g., bash, zsh), which could lead to unexpected behavior if the script uses syntax specific to sh.

## Q5. More fun with Linux

Try following commands in Bash and interpret the results: `cal`, `cal 2025`, `cal 9 1752` (anything unusual?), `date`, `hostname`, `arch`, `uname -a`, `uptime`, `who am i`, `who`, `w`, `id`, `last | head`, `echo {con,pre}{sent,fer}{s,ed}`, `time sleep 5`, `history | tail`.

**Solution:**

```{bash}
cal
cal 2025
cal 9 1752
```

```{bash}
date
hostname
arch
uname -a
uptime

```

```{bash}
who am i
who
w
id
last | head
echo {con,pre}{sent,fer}{s,ed}
time sleep 5
history | tail
```

## Q6. Book

1.  Git clone the repository <https://github.com/christophergandrud/Rep-Res-Book> for the book *Reproducible Research with R and RStudio* to your local machine. Do **not** put this repository within your homework repository `biostat-203b-2025-winter`.

2.  Open the project by clicking `rep-res-3rd-edition.Rproj` and compile the book by clicking `Build Book` in the `Build` panel of RStudio. (Hint: I was able to build `git_book` and `epub_book` directly. For `pdf_book`, I needed to add a line `\usepackage{hyperref}` to the file `Rep-Res-Book/rep-res-3rd-edition/latex/preabmle.tex`.)

The point of this exercise is (1) to obtain the book for free and (2) to see an example how a complicated project such as a book can be organized in a reproducible way. Use `sudo apt install PKGNAME` to install required Ubuntu packages and `tlmgr install PKGNAME` to install missing TexLive packages.

For grading purpose, include a screenshot of Section 4.1.5 of the book here.

**Solution:**

I cloned the reporsitory and compiled the book. Here is the screenshot of Section 4.1.5 of the book.

![](images/clipboard-3489899846.png)
